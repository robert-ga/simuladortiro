1: detector colores
import cv2
import numpy as np

def dibujar(mask,color):
  contornos,_ = cv2.findContours(mask, cv2.RETR_EXTERNAL,
      cv2.CHAIN_APPROX_SIMPLE)
  for c in contornos:
    area = cv2.contourArea(c)
    if area > 3000:
      x,y,w,h=cv2.boundingRect(c)
      if color==(255,0,0):
        cv2.rectangle(frame,(x,y),(x+w,y+h),color,3)
        cv2.line(frame,(x,y),(x+w,y+h),color,3)
        cv2.line(frame,(x+w,y),(x,y+h),color,3)
        cv2.putText(frame,'azul',(x-10,y-10),font,0.75,color,2,cv2.LINE_AA)

      # M = cv2.moments(c)
      # if (M["m00"]==0): M["m00"]=1
      # x = int(M["m10"]/M["m00"])
      # y = int(M['m01']/M['m00'])
      # nuevoContorno = cv2.convexHull(c)
      # cv2.circle(frame,(x,y),7,(0,255,0),-1)
      # cv2.putText(frame,'{},{}'.format(x,y),(x+10,y), font, 0.75,(0,255,0),1,cv2.LINE_AA)
      # cv2.drawContours(frame, [nuevoContorno], 0, color, 3)

cap = cv2.VideoCapture(1)

azulBajo = np.array([0,100,20],np.uint8)
azulAlto = np.array([5,255,255],np.uint8)

amarilloBajo = np.array([15,100,20],np.uint8)
amarilloAlto = np.array([45,255,255],np.uint8)


font = cv2.FONT_HERSHEY_SIMPLEX
while True:

  ret,frame = cap.read()

  if ret == True:
    frameHSV = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    maskAzul = cv2.inRange(frameHSV,azulBajo,azulAlto)
    maskAmarillo = cv2.inRange(frameHSV,amarilloBajo,amarilloAlto)

    dibujar(maskAzul,(255,0,0))
    dibujar(maskAmarillo,(0,255,255))
    cv2.imshow('frame',frame)
    if cv2.waitKey(1) & 0xFF == ord('s'):
      break
cap.release()
cv2.destroyAllWindows()



# import cv2
# import numpy as np
#
# def dibujar(mask,color):
#   contornos,_ = cv2.findContours(mask, cv2.RETR_EXTERNAL,
#       cv2.CHAIN_APPROX_SIMPLE)
#   for c in contornos:
#     area = cv2.contourArea(c)
#     if area > 3000:
#       M = cv2.moments(c)
#       if (M["m00"]==0): M["m00"]=1
#       x = int(M["m10"]/M["m00"])
#       y = int(M['m01']/M['m00'])
#       nuevoContorno = cv2.convexHull(c)
#       cv2.circle(frame,(x,y),7,(0,255,0),-1)
#       cv2.putText(frame,'{},{}'.format(x,y),(x+10,y), font, 0.75,(0,255,0),1,cv2.LINE_AA)
#       cv2.drawContours(frame, [nuevoContorno], 0, color, 3)
#
# cap = cv2.VideoCapture(1)
#
#
#
# redBajo1 = np.array([0,100,20],np.uint8)
# redAlto1 = np.array([5,255,255],np.uint8)
#
# redBajo2 = np.array([175,100,20],np.uint8)
# redAlto2 = np.array([179,255,255],np.uint8)
#
# font = cv2.FONT_HERSHEY_SIMPLEX
# while True:
#
#   ret,frame = cap.read()
#
#   if ret == True:
#     frame=cv2.flip(frame,1)
#     frameHSV = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
#     maskRed1 = cv2.inRange(frameHSV,redBajo1,redAlto1)
#     maskRed2 = cv2.inRange(frameHSV,redBajo2,redAlto2)
#     maskRed = cv2.add(maskRed1,maskRed2)
#     dibujar(maskRed,(0,0,255))
#     cv2.imshow('frame',frame)
#     if cv2.waitKey(1) & 0xFF == ord('s'):
#       break
# cap.release()
# cv2.destroyAllWindows()




2:import cv2
import mediapipe as mp

mp_drawing = mp.solutions.drawing_utils
mp_objectron = mp.solutions.objectron

cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)

with mp_objectron.Objectron(
     static_image_mode=True,
     max_num_objects=5,
     min_detection_confidence=0.5,
     model_name="Shoe") as objectron:

     while True:
          # image = cv2.imread("camara2.jpg")

          ret, image = cap.read()
          if ret == False:
               break

          height, width, _ = image.shape
          image = cv2.flip(image, 1)

          image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
          results = objectron.process(image_rgb)
          print("results.detected_objects: ", results.detected_objects)
          if results.detected_objects is not None:
               for detected_object in results.detected_objects:
                    mp_drawing.draw_landmarks(image, detected_object.landmarks_2d, mp_objectron.BOX_CONNECTIONS,
                                              mp_drawing.DrawingSpec(color=(255, 255, 255), thickness=2,
                                                                     circle_radius=6),
                                              mp_drawing.DrawingSpec(color=(128, 0, 255), thickness=2))
                    mp_drawing.draw_axis(image, detected_object.rotation, detected_object.translation)

          cv2.imshow("Image", image)
          if cv2.waitKey(1) & 0xFF == 27:
               break




cap.release()
cv2.destroyAllWindows()




3:pistola
import cv2
import numpy as np

cap = cv2.VideoCapture(1)

azulBajo = np.array([0,100,20],np.uint8)
azulAlto = np.array([5,255,255],np.uint8)
while True:

  ret,frame = cap.read()

  if ret==True:
    frame = cv2.flip(frame, 1)
    frameHSV = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(frameHSV,azulBajo,azulAlto)
    contornos,_ = cv2.findContours(mask, cv2.RETR_EXTERNAL,
      cv2.CHAIN_APPROX_SIMPLE)
    #cv2.drawContours(frame, contornos, -1, (255,0,0), 3)
    for c in contornos:
      area = cv2.contourArea(c)
      if area > 3000:
        M = cv2.moments(c)
        if (M["m00"]==0): M["m00"]=1
        x = int(M["m10"]/M["m00"])
        y = int(M['m01']/M['m00'])
        cv2.circle(frame, (x,y), 7, (0,255,0), -1)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(frame, '{},{}'.format(x,y),(x+10,y), font, 0.75,(0,255,0),1,cv2.LINE_AA)
        nuevoContorno = cv2.convexHull(c)
        cv2.drawContours(frame, [nuevoContorno], 0, (255,0,0), 3)
    cv2.imshow('maskAzul',mask)
    cv2.imshow('frame',frame)
    if cv2.waitKey(1) & 0xFF == ord('s'):
      break
cap.release()
cv2.destroyAllWindows()


4:pose
# import cv2
# import mediapipe as mp
#
# mp_drawing = mp.solutions.drawing_utils
# mp_pose = mp.solutions.pose
#
# #cap = cv2.VideoCapture("video_0002.mp4")
# cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
#
# with mp_pose.Pose(
#     static_image_mode=False) as pose:
#
#     while True:
#         ret, frame = cap.read()
#         if ret == False:
#             break
#         frame = cv2.flip(frame, 1)
#         height, width, _ = frame.shape
#         frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#         results = pose.process(frame_rgb)
#
#         if results.pose_landmarks is not None:
#
#             x = int(results.pose_landmarks.landmark[21].x * width)
#             y = int(results.pose_landmarks.landmark[21].y * height)
#
#             cv2.circle(frame,(x,y),10,(128,0,255),3)
#             cv2.circle(frame, (x, y), 5, (128, 0, 255), -1)
#
#         cv2.imshow("Frame", frame)
#         if cv2.waitKey(1) & 0xFF == 27:
#             break
#
# cap.release()
# cv2.destroyAllWindows()
#

import cv2
import mediapipe as mp

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

#cap = cv2.VideoCapture("video_0002.mp4")
cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)

with mp_pose.Pose(
    static_image_mode=False,min_detection_confidence=0.8) as pose:

    while True:
        ret, frame = cap.read()
        if ret == False:
            break
        frame = cv2.flip(frame, 1)
        height, width, _ = frame.shape
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = pose.process(frame_rgb)

        if results.pose_landmarks is not None:
            x2 = int(results.pose_landmarks.landmark[17].x * width)
            y2 = int(results.pose_landmarks.landmark[17].y * height)

            x1 = int(results.pose_landmarks.landmark[18].x * width)
            y1 = int(results.pose_landmarks.landmark[18].y * height)


            cv2.circle(frame, (x2, y2), 3, (255, 255, 255), -1)

            cv2.circle(frame, (x1, y1), 3, (255, 255, 255), -1)

            a=(x2+x1)/2

            s=(y2+y1)/2

            ax=int(a)
            ay=int(s)





            cv2.circle(frame, (ax, ay), 3, (255, 0, 0), -1)



            # mp_drawing.draw_landmarks(
            #     frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
            #     mp_drawing.DrawingSpec(color=(255, 0, 0), thickness=2, circle_radius=3),
            #     mp_drawing.DrawingSpec(color=(255, 255, 255), thickness=2))

        cv2.imshow("Frame", frame)
        if cv2.waitKey(1) & 0xFF == 27:
            break

cap.release()
cv2.destroyAllWindows()



